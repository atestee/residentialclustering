{"ast":null,"code":"var _jsxFileName = \"/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport { Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography } from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css';\nimport routes from \"../data/links.json\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LinkPicker() {\n  _s();\n\n  let routeTypesGrouped = {};\n  Object.keys(routes).map(t => routeTypesGrouped[t] = Object.keys(routes[t]));\n  let [isCheckAll, setIsCheckAll] = useState({\n    \"tram\": false,\n    \"metro\": false,\n    \"bus\": false,\n    \"funicular\": false\n  });\n  let [checkBool, setCheckBool] = useState(false);\n  let [isCheck, setIsCheck] = useState({\n    \"tram\": [],\n    \"metro\": [],\n    \"bus\": [],\n    \"funicular\": []\n  });\n  useEffect(() => {\n    console.log(\"A\");\n    let map = L.map('map', {\n      center: [50.07501157760184, 14.416865286199549],\n      zoom: 13,\n      layers: [L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n        maxZoom: 18,\n        id: 'toner-lite',\n        tileSize: 512,\n        zoomOffset: -1\n      })],\n      preferCanvas: true\n    });\n  }, [checkBool]);\n\n  function handleSelectAllClick(routeTypeName) {\n    isCheckAll[routeTypeName] = !isCheckAll[routeTypeName];\n    setCheckBool(!checkBool);\n\n    if (isCheckAll[routeTypeName]) {\n      isCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n    } else {\n      isCheck[routeTypeName] = [];\n    }\n  }\n\n  function handleClick(routeName, routeType) {\n    setCheckBool(!checkBool);\n\n    if (!isCheck[routeType].includes(routeName)) {\n      isCheck[routeType].push(routeName);\n    } else {\n      isCheck[routeType] = isCheck[routeType].filter(route => route !== routeName);\n      isCheckAll[routeType] = false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"mainDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      class: \"header\",\n      children: \"Route picker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"divWithAccordions\",\n      children: Object.keys(routeTypesGrouped).map(routeTypeName => /*#__PURE__*/_jsxDEV(Accordion, {\n        class: \"accordion\",\n        style: {\n          backgroundColor: \"lightgray\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n          expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 45\n          }, this),\n          \"aria-controls\": \"panel1a-content\",\n          id: \"panel1a-header\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            class: \"accordionName\",\n            children: routeTypeName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n          class: \"accordionDetails\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n              style: {\n                padding: 0\n              },\n              onClick: () => handleSelectAllClick(routeTypeName),\n              checked: isCheckAll[routeTypeName]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 38\n            }, this), \" Select All\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"rowCheckboxes\",\n            children: Object.values(routeTypesGrouped[routeTypeName]).map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"columnCheckboxes\",\n              children: [route, \" \", /*#__PURE__*/_jsxDEV(Checkbox, {\n                onChange: () => handleClick(route, routeTypeName),\n                checked: isCheck[routeTypeName].includes(route)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 87\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"column\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LinkPicker, \"vXzDIfYtbtpOTEo8oQNbWmKTPJg=\");\n\n_c = LinkPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"LinkPicker\");","map":{"version":3,"sources":["/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js"],"names":["React","useEffect","useState","Accordion","AccordionDetails","AccordionSummary","Checkbox","Typography","ExpandMoreIcon","routes","L","LinkPicker","routeTypesGrouped","Object","keys","map","t","isCheckAll","setIsCheckAll","checkBool","setCheckBool","isCheck","setIsCheck","console","log","center","zoom","layers","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","preferCanvas","handleSelectAllClick","routeTypeName","handleClick","routeName","routeType","includes","push","filter","route","backgroundColor","padding","values"],"mappings":"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","sourcesContent":["import {React, useEffect, useState} from \"react\";\nimport {Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css'\nimport routes from \"../data/links.json\"\nimport L from \"leaflet\";\n\nexport function LinkPicker() {\n    let routeTypesGrouped = {};\n    Object.keys(routes).map((t) => routeTypesGrouped[t] = Object.keys(routes[t]));\n\n    let [isCheckAll, setIsCheckAll] = useState({\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n    });\n\n    let [checkBool, setCheckBool] = useState(false);\n\n    let [isCheck, setIsCheck] = useState({\n        \"tram\": [],\n        \"metro\": [],\n        \"bus\": [],\n        \"funicular\": []\n    });\n\n    useEffect(() => {\n        console.log(\"A\")\n        let map = L.map('map', {\n            center: [50.07501157760184, 14.416865286199549],\n            zoom: 13,\n            layers: [\n                L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n                    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n                    maxZoom: 18,\n                    id: 'toner-lite',\n                    tileSize: 512,\n                    zoomOffset: -1\n                }),\n            ],\n            preferCanvas: true\n        });\n    }, [checkBool]);\n\n    function handleSelectAllClick(routeTypeName) {\n        isCheckAll[routeTypeName] = !isCheckAll[routeTypeName];\n        setCheckBool(!checkBool);\n\n        if (isCheckAll[routeTypeName]) {\n            isCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n        } else {\n            isCheck[routeTypeName] = [];\n        }\n    }\n\n    function handleClick(routeName, routeType){\n        setCheckBool(!checkBool);\n        if (!isCheck[routeType].includes(routeName)) {\n            isCheck[routeType].push(routeName);\n        } else {\n            isCheck[routeType] = isCheck[routeType].filter(route => route !== routeName);\n            isCheckAll[routeType] = false;\n        }\n    }\n\n    return (\n        <div class=\"mainDiv\">\n            <h2 class=\"header\">Route picker</h2>\n            <div class=\"divWithAccordions\">\n                {\n                    Object.keys(routeTypesGrouped).map((routeTypeName) => (\n                        <Accordion class=\"accordion\" style={{ backgroundColor: \"lightgray\"}}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography class=\"accordionName\">{routeTypeName}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails class=\"accordionDetails\">\n                                <div><Checkbox style={{ padding: 0}} onClick={() => handleSelectAllClick(routeTypeName)} checked={isCheckAll[routeTypeName]}/> Select All</div>\n                                <div class=\"rowCheckboxes\">\n                                    {\n                                        Object.values(routeTypesGrouped[routeTypeName]).map((route) => (\n                                            <div className=\"columnCheckboxes\">{route} <Checkbox onChange={() => handleClick(route, routeTypeName)} checked={isCheck[routeTypeName].includes(route)} /></div>\n                                        ))\n                                    }\n                                </div>\n                            </AccordionDetails>\n                        </Accordion>\n                    ))\n                }\n            </div>\n            <div class=\"column\">\n                <div id={\"map\"}></div>\n            </div>;\n        </div>\n    );\n\n\n}"]},"metadata":{},"sourceType":"module"}