{"ast":null,"code":"var _jsxFileName = \"/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport { Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography } from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css';\nimport routes from \"../data/links.json\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LinkPicker() {\n  _s();\n\n  let routeTypesGrouped = {};\n  Object.keys(routes).map(t => routeTypesGrouped[t] = Object.keys(routes[t]));\n  let routesGeojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n  };\n  const [isCheckAll, setIsCheckAll] = useState({\n    \"tram\": false,\n    \"metro\": false,\n    \"bus\": false,\n    \"funicular\": false\n  });\n  const [isCheck, setIsCheck] = useState({\n    \"tram\": [],\n    \"metro\": [],\n    \"bus\": [],\n    \"funicular\": []\n  });\n  const [isExpanded, setIsExpanded] = useState({\n    \"tram\": false,\n    \"metro\": false,\n    \"bus\": false,\n    \"funicular\": false\n  });\n  useEffect(() => {\n    let map = L.map('map', {\n      center: [50.07501157760184, 14.416865286199549],\n      zoom: 13,\n      layers: [L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n        maxZoom: 18,\n        id: 'toner-lite',\n        tileSize: 512,\n        zoomOffset: -1\n      })],\n      preferCanvas: true\n    });\n  }, []);\n\n  function handleSelectAllClick(routeTypeName) {\n    let newIsCheckAll = { ...isCheckAll\n    };\n    newIsCheckAll[routeTypeName] = !newIsCheckAll[routeTypeName];\n    setIsCheckAll(newIsCheckAll);\n    let newIsCheck = { ...isCheck\n    };\n\n    if (newIsCheckAll[routeTypeName]) {\n      console.log(routeTypesGrouped[routeTypeName]);\n      newIsCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n    } else {\n      newIsCheck[routeTypeName] = [];\n    }\n\n    setIsCheck(newIsCheck);\n  }\n\n  function handleClick(routeName, routeType) {\n    let newIsCheck = { ...isCheck\n    };\n\n    if (!isCheck[routeType].includes(routeName)) {\n      newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n    } else {\n      newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n      let newIsCheckAll = { ...isCheckAll\n      };\n      newIsCheckAll[routeType] = false;\n      setIsCheckAll(newIsCheckAll);\n    }\n\n    setIsCheck(newIsCheck);\n    console.log(newIsCheck);\n  }\n\n  function handleExpand(routeType) {\n    let newIsExpanded = { ...isExpanded\n    };\n\n    if (newIsExpanded[routeType]) {\n      newIsExpanded[routeType] = false;\n    } else {\n      Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n      newIsExpanded[routeType] = true;\n    }\n\n    setIsExpanded(newIsExpanded);\n  }\n\n  function setRoutesGeojson(routes) {\n    // let route = routes[\"metro\"][0];\n    console.log(routes);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"header\",\n      children: \"Route picker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divWithAccordions\",\n      children: Object.keys(routeTypesGrouped).map(routeTypeName => /*#__PURE__*/_jsxDEV(Accordion, {\n        className: \"accordion\",\n        onChange: () => handleExpand(routeTypeName),\n        expanded: isExpanded[routeTypeName],\n        children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n          expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 45\n          }, this),\n          \"aria-controls\": \"panel1a-content\",\n          id: \"panel1a-header\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            className: \"accordionName\",\n            children: routeTypeName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n          className: \"accordionDetails\",\n          children: [Object.keys(routeTypesGrouped[routeTypeName]).length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n              style: {\n                padding: 0\n              },\n              onClick: () => handleSelectAllClick(routeTypeName),\n              checked: isCheckAll[routeTypeName]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 41\n            }, this), !isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rowCheckboxes\",\n            children: Object.values(routeTypesGrouped[routeTypeName]).map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"columnCheckboxes\",\n              children: [route, \" \", /*#__PURE__*/_jsxDEV(Checkbox, {\n                onChange: () => {\n                  handleClick(route, routeTypeName);\n                  setRoutesGeojson(isCheck);\n                },\n                checked: isCheck[routeTypeName].includes(route)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 57\n              }, this)]\n            }, routeTypeName + ' ' + route, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this)]\n      }, routeTypeName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LinkPicker, \"QCv3nAgzJGoJNjDjjrmQ4DazKmc=\");\n\n_c = LinkPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"LinkPicker\");","map":{"version":3,"sources":["/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js"],"names":["React","useEffect","useState","Accordion","AccordionDetails","AccordionSummary","Checkbox","Typography","ExpandMoreIcon","routes","L","LinkPicker","routeTypesGrouped","Object","keys","map","t","routesGeojson","isCheckAll","setIsCheckAll","isCheck","setIsCheck","isExpanded","setIsExpanded","center","zoom","layers","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","preferCanvas","handleSelectAllClick","routeTypeName","newIsCheckAll","newIsCheck","console","log","handleClick","routeName","routeType","includes","filter","route","handleExpand","newIsExpanded","k","setRoutesGeojson","length","padding","values"],"mappings":"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","sourcesContent":["import {React, useEffect, useState} from \"react\";\nimport {Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css'\nimport routes from \"../data/links.json\"\nimport L from \"leaflet\";\n\nexport function LinkPicker() {\n    let routeTypesGrouped = {};\n    Object.keys(routes).map((t) => routeTypesGrouped[t] = Object.keys(routes[t]));\n\n    let routesGeojson = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n    };\n\n    const [isCheckAll, setIsCheckAll] = useState({\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n    });\n\n    const [isCheck, setIsCheck] = useState({\n        \"tram\": [],\n        \"metro\": [],\n        \"bus\": [],\n        \"funicular\": []\n    });\n\n    const [isExpanded, setIsExpanded] = useState({\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n    });\n\n    useEffect(() => {\n        let map = L.map('map', {\n            center: [50.07501157760184, 14.416865286199549],\n            zoom: 13,\n            layers: [\n                L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n                    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n                    maxZoom: 18,\n                    id: 'toner-lite',\n                    tileSize: 512,\n                    zoomOffset: -1\n                }),\n            ],\n            preferCanvas: true\n        });\n    }, [])\n\n    function handleSelectAllClick(routeTypeName) {\n        let newIsCheckAll = { ...isCheckAll };\n        newIsCheckAll[routeTypeName] = !newIsCheckAll[routeTypeName];\n        setIsCheckAll(newIsCheckAll);\n\n        let newIsCheck = { ...isCheck };\n\n        if (newIsCheckAll[routeTypeName]) {\n            console.log(routeTypesGrouped[routeTypeName]);\n            newIsCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n        } else {\n            newIsCheck[routeTypeName] = [];\n        }\n        setIsCheck(newIsCheck);\n    }\n\n    function handleClick(routeName, routeType){\n        let newIsCheck = { ...isCheck };\n        if (!isCheck[routeType].includes(routeName)) {\n            newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n        } else {\n            newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n            let newIsCheckAll = { ...isCheckAll };\n            newIsCheckAll[routeType] = false;\n            setIsCheckAll(newIsCheckAll);\n        }\n        setIsCheck(newIsCheck);\n\n        console.log(newIsCheck);\n    }\n\n    function handleExpand(routeType) {\n        let newIsExpanded = {...isExpanded};\n        if (newIsExpanded[routeType]) {\n            newIsExpanded[routeType] = false;\n        } else {\n            Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n            newIsExpanded[routeType] = true;\n        }\n        setIsExpanded(newIsExpanded);\n    }\n\n    function setRoutesGeojson(routes) {\n        // let route = routes[\"metro\"][0];\n        console.log(routes);\n    }\n\n    return (\n        <div className=\"mainDiv\">\n            <h2 className=\"header\">Route picker</h2>\n            <div className=\"divWithAccordions\">\n                {\n                    Object.keys(routeTypesGrouped).map((routeTypeName) => (\n                        <Accordion className=\"accordion\" key={ routeTypeName } onChange={() => handleExpand(routeTypeName)} expanded={isExpanded[routeTypeName]}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography className=\"accordionName\">{routeTypeName}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails className=\"accordionDetails\">\n                                {Object.keys(routeTypesGrouped[routeTypeName]).length > 1 &&\n                                    <div>\n                                        <Checkbox style={{ padding: 0}} onClick={() => handleSelectAllClick(routeTypeName)} checked={isCheckAll[routeTypeName]}/>\n                                        { !isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All' }\n                                    </div>\n                                }\n                                <div className=\"rowCheckboxes\">\n                                    {\n                                        Object.values(routeTypesGrouped[routeTypeName]).map((route) => (\n                                            <div className=\"columnCheckboxes\" key={ routeTypeName + ' ' + route }>\n                                                {route} <Checkbox onChange={() => {handleClick(route, routeTypeName); setRoutesGeojson(isCheck)}} checked={isCheck[routeTypeName].includes(route)} />\n                                            </div>\n                                        ))\n                                    }\n                                </div>\n                            </AccordionDetails>\n                        </Accordion>\n                    ))\n                }\n            </div>\n            <div className=\"column\">\n                <div id={\"map\"}></div>\n            </div>\n        </div>\n    );\n\n\n}"]},"metadata":{},"sourceType":"module"}