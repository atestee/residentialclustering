{"ast":null,"code":"var _jsxFileName = \"/home/atestee/Desktop/BP-sandbox/leaflet-demo/src/App.js\";\nimport React, { Component } from 'react';\nimport L from 'leaflet';\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport boundary from './geojson/population.geojson';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('./images/marker-icon-2x.png'),\n  iconUrl: require('./images/marker-icon.png'),\n  shadowUrl: require('./images/marker-shadow.png')\n}); // class App extends Component {\n//\n//     componentDidMount() {\n//         // this.boundary = require('./geojson/boundary.geojson');\n//         console.log(boundary);\n//     }\n//\n//     render() {\n//         const position = [50.073658, 14.418540]\n//\n//         return (\n//             <div class=\"splitscreen\">\n//                 <div className=\"App\" class=\"left\">\n//                     <MapContainer id={\"map\"} center={position} zoom={13} scrollWheelZoom={true} preferCanvas={true}>\n//                         <TileLayer\n//                             attribution='\n//                             Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors,\n//                             Imagery &copy <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n//                             url='https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png'\n//                             maxZoom= {18}\n//                             id= 'toner-lite'\n//                             tileSize= {512}\n//                             zoomOffset= {-1} />\n//\n//                     </MapContainer>\n//                 </div>\n//                 <div class=\"right\"><h1>Residential clustering</h1></div>\n//             </div>\n//         );\n//     }\n//\n// }\n//\n// export default App;\n\nclass App extends Component {\n  componentDidMount() {\n    console.log(boundary);\n    this.map = L.map('map', {\n      center: [50.07501157760184, 14.416865286199549],\n      zoom: 13,\n      layers: [L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n        maxZoom: 15,\n        id: 'toner-lite',\n        tileSize: 512,\n        zoomOffset: -1\n      })],\n      preferCanvas: true\n    });\n    let myStyle = {\n      radius: 3,\n      fillColor: \"rgba(243,225,5,0.76)\",\n      color: \"rgba(243,225,5,0.76)\",\n      weight: 1,\n      opacity: 0.1,\n      fillOpacity: 0.8\n    };\n    L.geoJSON(boundary, {\n      pointToLayer: function (feature, latlng) {\n        return L.circleMarker(latlng, myStyle);\n      }\n    }).addTo(this.map);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/atestee/Desktop/BP-sandbox/leaflet-demo/src/App.js"],"names":["React","Component","L","MapContainer","TileLayer","GeoJSON","boundary","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","App","componentDidMount","console","log","map","center","zoom","layers","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","preferCanvas","myStyle","radius","fillColor","color","weight","opacity","fillOpacity","geoJSON","pointToLayer","feature","latlng","circleMarker","addTo","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,SAAQC,YAAR,EAAsBC,SAAtB,EAAiCC,OAAjC,QAA+C,eAA/C;AACA,OAAOC,QAAP,MAAqB,8BAArB;;AAEA,OAAOJ,CAAC,CAACK,IAAF,CAAOC,OAAP,CAAeC,SAAf,CAAyBC,WAAhC;AAEAR,CAAC,CAACK,IAAF,CAAOC,OAAP,CAAeG,YAAf,CAA4B;AACxBC,EAAAA,aAAa,EAAEC,OAAO,CAAC,6BAAD,CADE;AAExBC,EAAAA,OAAO,EAAED,OAAO,CAAC,0BAAD,CAFQ;AAGxBE,EAAAA,SAAS,EAAEF,OAAO,CAAC,4BAAD;AAHM,CAA5B,E,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMG,GAAN,SAAkBf,SAAlB,CAA4B;AACxBgB,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACA,SAAKc,GAAL,GAAWlB,CAAC,CAACkB,GAAF,CAAM,KAAN,EAAa;AACpBC,MAAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,kBAApB,CADY;AAEpBC,MAAAA,IAAI,EAAE,EAFc;AAGpBC,MAAAA,MAAM,EAAE,CACJrB,CAAC,CAACsB,SAAF,CAAY,4DAAZ,EAA0E;AACtEC,QAAAA,WAAW,EAAE,sQADyD;AAEtEC,QAAAA,OAAO,EAAE,EAF6D;AAGtEC,QAAAA,EAAE,EAAE,YAHkE;AAItEC,QAAAA,QAAQ,EAAE,GAJ4D;AAKtEC,QAAAA,UAAU,EAAE,CAAC;AALyD,OAA1E,CADI,CAHY;AAYpBC,MAAAA,YAAY,EAAE;AAZM,KAAb,CAAX;AAeA,QAAIC,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAG,CADC;AAEVC,MAAAA,SAAS,EAAG,sBAFF;AAGVC,MAAAA,KAAK,EAAG,sBAHE;AAIVC,MAAAA,MAAM,EAAG,CAJC;AAKVC,MAAAA,OAAO,EAAG,GALA;AAMVC,MAAAA,WAAW,EAAG;AANJ,KAAd;AASAnC,IAAAA,CAAC,CAACoC,OAAF,CAAUhC,QAAV,EAAoB;AAChBiC,MAAAA,YAAY,EAAE,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACrC,eAAOvC,CAAC,CAACwC,YAAF,CAAeD,MAAf,EAAuBV,OAAvB,CAAP;AACH;AAHe,KAApB,EAIGY,KAJH,CAIS,KAAKvB,GAJd;AAMH;;AAEDwB,EAAAA,MAAM,GAAI;AACN,wBAAO;AAAK,MAAA,EAAE,EAAE;AAAT;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AArCuB;;AAwC5B,eAAe5B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport L from 'leaflet';\nimport {MapContainer, TileLayer, GeoJSON} from \"react-leaflet\";\nimport boundary from './geojson/population.geojson';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('./images/marker-icon-2x.png'),\n    iconUrl: require('./images/marker-icon.png'),\n    shadowUrl: require('./images/marker-shadow.png')\n});\n\n// class App extends Component {\n//\n//     componentDidMount() {\n//         // this.boundary = require('./geojson/boundary.geojson');\n//         console.log(boundary);\n//     }\n//\n//     render() {\n//         const position = [50.073658, 14.418540]\n//\n//         return (\n//             <div class=\"splitscreen\">\n//                 <div className=\"App\" class=\"left\">\n//                     <MapContainer id={\"map\"} center={position} zoom={13} scrollWheelZoom={true} preferCanvas={true}>\n//                         <TileLayer\n//                             attribution='\n//                             Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors,\n//                             Imagery &copy <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n//                             url='https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png'\n//                             maxZoom= {18}\n//                             id= 'toner-lite'\n//                             tileSize= {512}\n//                             zoomOffset= {-1} />\n//\n//                     </MapContainer>\n//                 </div>\n//                 <div class=\"right\"><h1>Residential clustering</h1></div>\n//             </div>\n//         );\n//     }\n//\n// }\n//\n// export default App;\n\n\nclass App extends Component {\n    componentDidMount() {\n        console.log(boundary)\n        this.map = L.map('map', {\n            center: [50.07501157760184, 14.416865286199549],\n            zoom: 13,\n            layers: [\n                L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n                    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n                    maxZoom: 15,\n                    id: 'toner-lite',\n                    tileSize: 512,\n                    zoomOffset: -1\n                }),\n            ],\n            preferCanvas: true\n        });\n\n        let myStyle = {\n            radius : 3,\n            fillColor : \"rgba(243,225,5,0.76)\",\n            color : \"rgba(243,225,5,0.76)\",\n            weight : 1,\n            opacity : 0.1,\n            fillOpacity : 0.8\n        };\n\n        L.geoJSON(boundary, {\n            pointToLayer: function (feature, latlng) {\n                return L.circleMarker(latlng, myStyle);\n            }\n        }).addTo(this.map);\n\n    }\n\n    render () {\n        return <div id={\"map\"}></div>;\n    }\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}