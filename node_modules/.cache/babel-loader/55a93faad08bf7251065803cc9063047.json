{"ast":null,"code":"import { Component, useEffect, useState } from \"react\";\nimport { Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography } from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css';\nimport routes from \"../data/links.json\";\nimport L from \"leaflet\";\n\nclass LinkPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.routeTypesGrouped = {};\n    this.map = null;\n    this.state = {\n      isCheckAll: {\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n      },\n      isCheck: {\n        \"tram\": [],\n        \"metro\": [],\n        \"bus\": [],\n        \"funicular\": []\n      },\n      isExpanded: {\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n      }\n    };\n    Object.keys(routes).map(t => this.routeTypesGrouped[t] = Object.keys(routes[t]));\n  }\n\n  componentDidMount() {\n    this.map = L.map('map', {\n      center: [50.07501157760184, 14.416865286199549],\n      zoom: 13,\n      layers: [L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n        maxZoom: 18,\n        id: 'toner-lite',\n        tileSize: 512,\n        zoomOffset: -1\n      })],\n      preferCanvas: true\n    });\n  }\n\n} // export function LinkPicker() {\n//     // let routeTypesGrouped = {};\n//     // Object.keys(routes).map((t) => routeTypesGrouped[t] = Object.keys(routes[t]));\n//\n//     let routesGeojson = {\n//         \"type\": \"FeatureCollection\",\n//         \"features\": []\n//     };\n//\n//     const [isCheckAll, setIsCheckAll] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     const [isCheck, setIsCheck] = useState({\n//         \"tram\": [],\n//         \"metro\": [],\n//         \"bus\": [],\n//         \"funicular\": []\n//     });\n//\n//     const [isExpanded, setIsExpanded] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     useEffect(() => {\n//         let map = L.map('map', {\n//             center: [50.07501157760184, 14.416865286199549],\n//             zoom: 13,\n//             layers: [\n//                 L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n//                     attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n//                     maxZoom: 18,\n//                     id: 'toner-lite',\n//                     tileSize: 512,\n//                     zoomOffset: -1\n//                 }),\n//             ],\n//             preferCanvas: true\n//         });\n//     }, [])\n//\n//     function handleSelectAllClick(routeTypeName) {\n//         let newIsCheckAll = { ...isCheckAll };\n//         newIsCheckAll[routeTypeName] = !newIsCheckAll[routeTypeName];\n//         setIsCheckAll(newIsCheckAll);\n//\n//         let newIsCheck = { ...isCheck };\n//\n//         if (newIsCheckAll[routeTypeName]) {\n//             console.log(routeTypesGrouped[routeTypeName]);\n//             newIsCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n//         } else {\n//             newIsCheck[routeTypeName] = [];\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleClick(routeName, routeType){\n//         let newIsCheck = { ...isCheck };\n//         if (!isCheck[routeType].includes(routeName)) {\n//             newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n//         } else {\n//             newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n//             let newIsCheckAll = { ...isCheckAll };\n//             newIsCheckAll[routeType] = false;\n//             setIsCheckAll(newIsCheckAll);\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleExpand(routeType) {\n//         let newIsExpanded = {...isExpanded};\n//         if (newIsExpanded[routeType]) {\n//             newIsExpanded[routeType] = false;\n//         } else {\n//             Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n//             newIsExpanded[routeType] = true;\n//         }\n//         setIsExpanded(newIsExpanded);\n//     }\n//\n//     function setRoutesGeojson(routes) {\n//\n//         // let route = routes[\"metro\"][0];\n//         console.log(routes);\n//     }\n//\n//     return (\n//         <div className=\"mainDiv\">\n//             <h2 className=\"header\">Route picker</h2>\n//             <div className=\"divWithAccordions\">\n//                 {\n//                     Object.keys(routeTypesGrouped).map((routeTypeName) => (\n//                         <Accordion className=\"accordion\" key={ routeTypeName } onChange={() => handleExpand(routeTypeName)} expanded={isExpanded[routeTypeName]}>\n//                             <AccordionSummary\n//                                 expandIcon={<ExpandMoreIcon />}\n//                                 aria-controls=\"panel1a-content\"\n//                                 id=\"panel1a-header\"\n//                             >\n//                                 <Typography className=\"accordionName\">{routeTypeName}</Typography>\n//                             </AccordionSummary>\n//                             <AccordionDetails className=\"accordionDetails\">\n//                                 {Object.keys(routeTypesGrouped[routeTypeName]).length > 1 &&\n//                                     <div>\n//                                         <Checkbox style={{ padding: 0}} onClick={() => handleSelectAllClick(routeTypeName)} checked={isCheckAll[routeTypeName]}/>\n//                                         { !isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All' }\n//                                     </div>\n//                                 }\n//                                 <div className=\"rowCheckboxes\">\n//                                     {\n//                                         Object.values(routeTypesGrouped[routeTypeName]).map((route) => (\n//                                             <div className=\"columnCheckboxes\" key={ routeTypeName + ' ' + route }>\n//                                                 {route} <Checkbox onChange={() => {handleClick(route, routeTypeName); setRoutesGeojson(isCheck)}} checked={isCheck[routeTypeName].includes(route)} />\n//                                             </div>\n//                                         ))\n//                                     }\n//                                 </div>\n//                             </AccordionDetails>\n//                         </Accordion>\n//                     ))\n//                 }\n//             </div>\n//             <div className=\"column\">\n//                 <div id={\"map\"}></div>\n//             </div>\n//         </div>\n//     );\n//\n//\n// }","map":{"version":3,"sources":["/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js"],"names":["Component","useEffect","useState","Accordion","AccordionDetails","AccordionSummary","Checkbox","Typography","ExpandMoreIcon","routes","L","LinkPicker","constructor","props","routeTypesGrouped","map","state","isCheckAll","isCheck","isExpanded","Object","keys","t","componentDidMount","center","zoom","layers","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","preferCanvas"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,SAAQC,SAAR,EAAmBC,gBAAnB,EAAqCC,gBAArC,EAAuDC,QAAvD,EAAiEC,UAAjE,QAAkF,eAAlF;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAO,kBAAP;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,CAAP,MAAc,SAAd;;AAEA,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AAI/BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAHnBC,iBAGmB,GAHC,EAGD;AAAA,SAFnBC,GAEmB,GAFb,IAEa;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AACR,gBAAQ,KADA;AAER,iBAAS,KAFD;AAGR,eAAO,KAHC;AAIR,qBAAa;AAJL,OADH;AAOTC,MAAAA,OAAO,EAAE;AACL,gBAAQ,EADH;AAEL,iBAAS,EAFJ;AAGL,eAAO,EAHF;AAIL,qBAAa;AAJR,OAPA;AAaTC,MAAAA,UAAU,EAAE;AACR,gBAAQ,KADA;AAER,iBAAS,KAFD;AAGR,eAAO,KAHC;AAIR,qBAAa;AAJL;AAbH,KAAb;AAqBAC,IAAAA,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBM,GAApB,CAAyBO,CAAD,IAAQ,KAAKR,iBAAN,CAAyBQ,CAAzB,IAA8BF,MAAM,CAACC,IAAP,CAAYZ,MAAM,CAACa,CAAD,CAAlB,CAA7D;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,GAAL,GAAWL,CAAC,CAACK,GAAF,CAAM,KAAN,EAAa;AACpBS,MAAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,kBAApB,CADY;AAEpBC,MAAAA,IAAI,EAAE,EAFc;AAGpBC,MAAAA,MAAM,EAAE,CACJhB,CAAC,CAACiB,SAAF,CAAY,4DAAZ,EAA0E;AACtEC,QAAAA,WAAW,EAAE,sQADyD;AAEtEC,QAAAA,OAAO,EAAE,EAF6D;AAGtEC,QAAAA,EAAE,EAAE,YAHkE;AAItEC,QAAAA,QAAQ,EAAE,GAJ4D;AAKtEC,QAAAA,UAAU,EAAE,CAAC;AALyD,OAA1E,CADI,CAHY;AAYpBC,MAAAA,YAAY,EAAE;AAZM,KAAb,CAAX;AAcH;;AA7C8B,C,CAgDnsourcesContent":["import {Component, useEffect, useState} from \"react\";\nimport {Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css'\nimport routes from \"../data/links.json\"\nimport L from \"leaflet\";\n\nclass LinkPicker extends Component {\n    routeTypesGrouped = {};\n    map = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCheckAll: {\n                \"tram\": false,\n                \"metro\": false,\n                \"bus\": false,\n                \"funicular\": false\n            },\n            isCheck: {\n                \"tram\": [],\n                \"metro\": [],\n                \"bus\": [],\n                \"funicular\": []\n            },\n            isExpanded: {\n                \"tram\": false,\n                \"metro\": false,\n                \"bus\": false,\n                \"funicular\": false\n            }\n        }\n\n        Object.keys(routes).map((t) => (this.routeTypesGrouped)[t] = Object.keys(routes[t]))\n    }\n\n    componentDidMount() {\n        this.map = L.map('map', {\n            center: [50.07501157760184, 14.416865286199549],\n            zoom: 13,\n            layers: [\n                L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n                    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n                    maxZoom: 18,\n                    id: 'toner-lite',\n                    tileSize: 512,\n                    zoomOffset: -1\n                }),\n            ],\n            preferCanvas: true\n        })\n    }\n}\n\n// export function LinkPicker() {\n//     // let routeTypesGrouped = {};\n//     // Object.keys(routes).map((t) => routeTypesGrouped[t] = Object.keys(routes[t]));\n//\n//     let routesGeojson = {\n//         \"type\": \"FeatureCollection\",\n//         \"features\": []\n//     };\n//\n//     const [isCheckAll, setIsCheckAll] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     const [isCheck, setIsCheck] = useState({\n//         \"tram\": [],\n//         \"metro\": [],\n//         \"bus\": [],\n//         \"funicular\": []\n//     });\n//\n//     const [isExpanded, setIsExpanded] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     useEffect(() => {\n//         let map = L.map('map', {\n//             center: [50.07501157760184, 14.416865286199549],\n//             zoom: 13,\n//             layers: [\n//                 L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n//                     attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n//                     maxZoom: 18,\n//                     id: 'toner-lite',\n//                     tileSize: 512,\n//                     zoomOffset: -1\n//                 }),\n//             ],\n//             preferCanvas: true\n//         });\n//     }, [])\n//\n//     function handleSelectAllClick(routeTypeName) {\n//         let newIsCheckAll = { ...isCheckAll };\n//         newIsCheckAll[routeTypeName] = !newIsCheckAll[routeTypeName];\n//         setIsCheckAll(newIsCheckAll);\n//\n//         let newIsCheck = { ...isCheck };\n//\n//         if (newIsCheckAll[routeTypeName]) {\n//             console.log(routeTypesGrouped[routeTypeName]);\n//             newIsCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n//         } else {\n//             newIsCheck[routeTypeName] = [];\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleClick(routeName, routeType){\n//         let newIsCheck = { ...isCheck };\n//         if (!isCheck[routeType].includes(routeName)) {\n//             newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n//         } else {\n//             newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n//             let newIsCheckAll = { ...isCheckAll };\n//             newIsCheckAll[routeType] = false;\n//             setIsCheckAll(newIsCheckAll);\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleExpand(routeType) {\n//         let newIsExpanded = {...isExpanded};\n//         if (newIsExpanded[routeType]) {\n//             newIsExpanded[routeType] = false;\n//         } else {\n//             Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n//             newIsExpanded[routeType] = true;\n//         }\n//         setIsExpanded(newIsExpanded);\n//     }\n//\n//     function setRoutesGeojson(routes) {\n//\n//         // let route = routes[\"metro\"][0];\n//         console.log(routes);\n//     }\n//\n//     return (\n//         <div className=\"mainDiv\">\n//             <h2 className=\"header\">Route picker</h2>\n//             <div className=\"divWithAccordions\">\n//                 {\n//                     Object.keys(routeTypesGrouped).map((routeTypeName) => (\n//                         <Accordion className=\"accordion\" key={ routeTypeName } onChange={() => handleExpand(routeTypeName)} expanded={isExpanded[routeTypeName]}>\n//                             <AccordionSummary\n//                                 expandIcon={<ExpandMoreIcon />}\n//                                 aria-controls=\"panel1a-content\"\n//                                 id=\"panel1a-header\"\n//                             >\n//                                 <Typography className=\"accordionName\">{routeTypeName}</Typography>\n//                             </AccordionSummary>\n//                             <AccordionDetails className=\"accordionDetails\">\n//                                 {Object.keys(routeTypesGrouped[routeTypeName]).length > 1 &&\n//                                     <div>\n//                                         <Checkbox style={{ padding: 0}} onClick={() => handleSelectAllClick(routeTypeName)} checked={isCheckAll[routeTypeName]}/>\n//                                         { !isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All' }\n//                                     </div>\n//                                 }\n//                                 <div className=\"rowCheckboxes\">\n//                                     {\n//                                         Object.values(routeTypesGrouped[routeTypeName]).map((route) => (\n//                                             <div className=\"columnCheckboxes\" key={ routeTypeName + ' ' + route }>\n//                                                 {route} <Checkbox onChange={() => {handleClick(route, routeTypeName); setRoutesGeojson(isCheck)}} checked={isCheck[routeTypeName].includes(route)} />\n//                                             </div>\n//                                         ))\n//                                     }\n//                                 </div>\n//                             </AccordionDetails>\n//                         </Accordion>\n//                     ))\n//                 }\n//             </div>\n//             <div className=\"column\">\n//                 <div id={\"map\"}></div>\n//             </div>\n//         </div>\n//     );\n//\n//\n// }"]},"metadata":{},"sourceType":"module"}