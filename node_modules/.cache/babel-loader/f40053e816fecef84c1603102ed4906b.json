{"ast":null,"code":"var _jsxFileName = \"/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js\";\nimport { Component, useEffect, useState } from \"react\";\nimport { Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography } from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css';\nimport routes from \"../data/links.json\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class LinkPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.routeTypesGrouped = {};\n    this.map = null;\n    this.state = {\n      isCheckAll: {\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n      },\n      isCheck: {\n        \"tram\": [],\n        \"metro\": [],\n        \"bus\": [],\n        \"funicular\": []\n      },\n      isExpanded: {\n        \"tram\": false,\n        \"metro\": false,\n        \"bus\": false,\n        \"funicular\": false\n      }\n    };\n    Object.keys(routes).map(t => this.routeTypesGrouped[t] = Object.keys(routes[t]));\n  }\n\n  componentDidMount() {\n    console.log(this.state.isExpanded);\n    this.map = L.map('map', {\n      center: [50.07501157760184, 14.416865286199549],\n      zoom: 13,\n      layers: [L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n        maxZoom: 18,\n        id: 'toner-lite',\n        tileSize: 512,\n        zoomOffset: -1\n      })],\n      preferCanvas: true\n    });\n  }\n\n  handleSelectAllClick(routeTypeName) {\n    this.setState(state => {\n      let newIsCheckAll = { ...state.isCheckAll\n      };\n      let newIsCheck = { ...state.isCheck\n      };\n      newIsCheckAll[routeTypeName] = !state.isCheckAll[routeTypeName];\n\n      if (newIsCheckAll[routeTypeName]) {\n        newIsCheck[routeTypeName] = this.routeTypesGrouped[routeTypeName];\n      } else {\n        newIsCheck[routeTypeName] = [];\n      }\n\n      return {\n        isCheckAll: newIsCheckAll,\n        isCheck: newIsCheck\n      };\n    });\n  }\n\n  handleClick(routeName, routeType) {\n    this.setState(state => {\n      let newIsCheck = { ...this.state.isCheck\n      };\n      let newIsCheckAll = { ...this.state.isCheckAll\n      };\n\n      if (!state.isCheck[routeType].includes(routeName)) {\n        newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n      } else {\n        newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n        newIsCheckAll[routeType] = false;\n      }\n\n      return {\n        isCheckAll: newIsCheckAll,\n        isCheck: newIsCheck\n      };\n    });\n  }\n\n  handleExpand(routeType) {\n    let newIsExpanded = { ...this.state.isExpanded\n    };\n\n    if (newIsExpanded[routeType]) {\n      newIsExpanded[routeType] = false;\n    } else {\n      Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n      newIsExpanded[routeType] = true;\n    }\n\n    return {\n      isExpanded: newIsExpanded\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header\",\n        children: \"Route picker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divWithAccordions\",\n        children: Object.keys(this.routeTypesGrouped).map(routeTypeName => /*#__PURE__*/_jsxDEV(Accordion, {\n          className: \"accordion\",\n          onChange: () => this.handleExpand(routeTypeName),\n          expanded: this.state.isExpanded[routeTypeName],\n          children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n            expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 49\n            }, this),\n            \"aria-controls\": \"panel1a-content\",\n            id: \"panel1a-header\",\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: \"accordionName\",\n              children: routeTypeName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n            className: \"accordionDetails\",\n            children: [Object.keys(this.routeTypesGrouped[routeTypeName]).length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                style: {\n                  padding: 0\n                },\n                onClick: () => this.handleSelectAllClick(routeTypeName),\n                checked: this.state.isCheckAll[routeTypeName]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 45\n              }, this), !this.state.isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rowCheckboxes\",\n              children: Object.values(this.routeTypesGrouped[routeTypeName]).map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"columnCheckboxes\",\n                children: [route, \" \", /*#__PURE__*/_jsxDEV(Checkbox, {\n                  onChange: () => {\n                    this.handleClick(route, routeTypeName);\n                  },\n                  checked: this.state.isCheck[routeTypeName].includes(route)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 61\n                }, this)]\n              }, routeTypeName + ' ' + route, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this)]\n        }, routeTypeName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  }\n\n} // export function LinkPicker() {\n//     // let routeTypesGrouped = {};\n//     // Object.keys(routes).map((t) => routeTypesGrouped[t] = Object.keys(routes[t]));\n//\n//     let routesGeojson = {\n//         \"type\": \"FeatureCollection\",\n//         \"features\": []\n//     };\n//\n//     const [isCheckAll, setIsCheckAll] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     const [isCheck, setIsCheck] = useState({\n//         \"tram\": [],\n//         \"metro\": [],\n//         \"bus\": [],\n//         \"funicular\": []\n//     });\n//\n//     const [isExpanded, setIsExpanded] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     useEffect(() => {\n//         let map = L.map('map', {\n//             center: [50.07501157760184, 14.416865286199549],\n//             zoom: 13,\n//             layers: [\n//                 L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n//                     attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n//                     maxZoom: 18,\n//                     id: 'toner-lite',\n//                     tileSize: 512,\n//                     zoomOffset: -1\n//                 }),\n//             ],\n//             preferCanvas: true\n//         });\n//     }, [])\n//\n//     function handleSelectAllClick(routeTypeName) {\n//         let newIsCheckAll = { ...isCheckAll };\n//         newIsCheckAll[routeTypeName] = !newIsCheckAll[routeTypeName];\n//         setIsCheckAll(newIsCheckAll);\n//\n//         let newIsCheck = { ...isCheck };\n//\n//         if (newIsCheckAll[routeTypeName]) {\n//             console.log(routeTypesGrouped[routeTypeName]);\n//             newIsCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n//         } else {\n//             newIsCheck[routeTypeName] = [];\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleClick(routeName, routeType){\n//         let newIsCheck = { ...isCheck };\n//         if (!isCheck[routeType].includes(routeName)) {\n//             newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n//         } else {\n//             newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n//             let newIsCheckAll = { ...isCheckAll };\n//             newIsCheckAll[routeType] = false;\n//             setIsCheckAll(newIsCheckAll);\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleExpand(routeType) {\n//         let newIsExpanded = {...isExpanded};\n//         if (newIsExpanded[routeType]) {\n//             newIsExpanded[routeType] = false;\n//         } else {\n//             Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n//             newIsExpanded[routeType] = true;\n//         }\n//         setIsExpanded(newIsExpanded);\n//     }\n//\n//     function setRoutesGeojson(routes) {\n//\n//         // let route = routes[\"metro\"][0];\n//         console.log(routes);\n//     }\n//\n//     return (\n//         <div className=\"mainDiv\">\n//             <h2 className=\"header\">Route picker</h2>\n//             <div className=\"divWithAccordions\">\n//                 {\n//                     Object.keys(routeTypesGrouped).map((routeTypeName) => (\n//                         <Accordion className=\"accordion\" key={ routeTypeName } onChange={() => handleExpand(routeTypeName)} expanded={isExpanded[routeTypeName]}>\n//                             <AccordionSummary\n//                                 expandIcon={<ExpandMoreIcon />}\n//                                 aria-controls=\"panel1a-content\"\n//                                 id=\"panel1a-header\"\n//                             >\n//                                 <Typography className=\"accordionName\">{routeTypeName}</Typography>\n//                             </AccordionSummary>\n//                             <AccordionDetails className=\"accordionDetails\">\n//                                 {Object.keys(routeTypesGrouped[routeTypeName]).length > 1 &&\n//                                     <div>\n//                                         <Checkbox style={{ padding: 0}} onClick={() => handleSelectAllClick(routeTypeName)} checked={isCheckAll[routeTypeName]}/>\n//                                         { !isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All' }\n//                                     </div>\n//                                 }\n//                                 <div className=\"rowCheckboxes\">\n//                                     {\n//                                         Object.values(routeTypesGrouped[routeTypeName]).map((route) => (\n//                                             <div className=\"columnCheckboxes\" key={ routeTypeName + ' ' + route }>\n//                                                 {route} <Checkbox onChange={() => {handleClick(route, routeTypeName); setRoutesGeojson(isCheck)}} checked={isCheck[routeTypeName].includes(route)} />\n//                                             </div>\n//                                         ))\n//                                     }\n//                                 </div>\n//                             </AccordionDetails>\n//                         </Accordion>\n//                     ))\n//                 }\n//             </div>\n//             <div className=\"column\">\n//                 <div id={\"map\"}></div>\n//             </div>\n//         </div>\n//     );\n//\n//\n// }","map":{"version":3,"sources":["/home/atestee/Desktop/BP/leaflet-demo/src/components/LinkPicker.js"],"names":["Component","useEffect","useState","Accordion","AccordionDetails","AccordionSummary","Checkbox","Typography","ExpandMoreIcon","routes","L","LinkPicker","constructor","props","routeTypesGrouped","map","state","isCheckAll","isCheck","isExpanded","Object","keys","t","componentDidMount","console","log","center","zoom","layers","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","preferCanvas","handleSelectAllClick","routeTypeName","setState","newIsCheckAll","newIsCheck","handleClick","routeName","routeType","includes","filter","route","handleExpand","newIsExpanded","k","render","length","padding","values"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,SAAQC,SAAR,EAAmBC,gBAAnB,EAAqCC,gBAArC,EAAuDC,QAAvD,EAAiEC,UAAjE,QAAkF,eAAlF;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAO,kBAAP;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,CAAP,MAAc,SAAd;;AAEA,OAAO,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AAItCY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAHnBC,iBAGmB,GAHC,EAGD;AAAA,SAFnBC,GAEmB,GAFb,IAEa;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AACR,gBAAQ,KADA;AAER,iBAAS,KAFD;AAGR,eAAO,KAHC;AAIR,qBAAa;AAJL,OADH;AAOTC,MAAAA,OAAO,EAAE;AACL,gBAAQ,EADH;AAEL,iBAAS,EAFJ;AAGL,eAAO,EAHF;AAIL,qBAAa;AAJR,OAPA;AAaTC,MAAAA,UAAU,EAAE;AACR,gBAAQ,KADA;AAER,iBAAS,KAFD;AAGR,eAAO,KAHC;AAIR,qBAAa;AAJL;AAbH,KAAb;AAqBAC,IAAAA,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBM,GAApB,CAAyBO,CAAD,IAAQ,KAAKR,iBAAN,CAAyBQ,CAAzB,IAA8BF,MAAM,CAACC,IAAP,CAAYZ,MAAM,CAACa,CAAD,CAAlB,CAA7D;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWG,UAAvB;AACA,SAAKJ,GAAL,GAAWL,CAAC,CAACK,GAAF,CAAM,KAAN,EAAa;AACpBW,MAAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,kBAApB,CADY;AAEpBC,MAAAA,IAAI,EAAE,EAFc;AAGpBC,MAAAA,MAAM,EAAE,CACJlB,CAAC,CAACmB,SAAF,CAAY,4DAAZ,EAA0E;AACtEC,QAAAA,WAAW,EAAE,sQADyD;AAEtEC,QAAAA,OAAO,EAAE,EAF6D;AAGtEC,QAAAA,EAAE,EAAE,YAHkE;AAItEC,QAAAA,QAAQ,EAAE,GAJ4D;AAKtEC,QAAAA,UAAU,EAAE,CAAC;AALyD,OAA1E,CADI,CAHY;AAYpBC,MAAAA,YAAY,EAAE;AAZM,KAAb,CAAX;AAcH;;AAEDC,EAAAA,oBAAoB,CAACC,aAAD,EAAgB;AAChC,SAAKC,QAAL,CAAetB,KAAD,IAAW;AACrB,UAAIuB,aAAa,GAAG,EAAE,GAAGvB,KAAK,CAACC;AAAX,OAApB;AACA,UAAIuB,UAAU,GAAG,EAAE,GAAGxB,KAAK,CAACE;AAAX,OAAjB;AACAqB,MAAAA,aAAa,CAACF,aAAD,CAAb,GAA+B,CAACrB,KAAK,CAACC,UAAN,CAAiBoB,aAAjB,CAAhC;;AAEA,UAAIE,aAAa,CAACF,aAAD,CAAjB,EAAkC;AAC9BG,QAAAA,UAAU,CAACH,aAAD,CAAV,GAA4B,KAAKvB,iBAAL,CAAuBuB,aAAvB,CAA5B;AACH,OAFD,MAEO;AACHG,QAAAA,UAAU,CAACH,aAAD,CAAV,GAA4B,EAA5B;AACH;;AAED,aAAO;AACHpB,QAAAA,UAAU,EAAEsB,aADT;AAEHrB,QAAAA,OAAO,EAAEsB;AAFN,OAAP;AAIH,KAfD;AAgBH;;AAEDC,EAAAA,WAAW,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AAC7B,SAAKL,QAAL,CAAetB,KAAD,IAAW;AACrB,UAAIwB,UAAU,GAAG,EAAE,GAAG,KAAKxB,KAAL,CAAWE;AAAhB,OAAjB;AACA,UAAIqB,aAAa,GAAG,EAAE,GAAG,KAAKvB,KAAL,CAAWC;AAAhB,OAApB;;AAEA,UAAI,CAACD,KAAK,CAACE,OAAN,CAAcyB,SAAd,EAAyBC,QAAzB,CAAkCF,SAAlC,CAAL,EAAmD;AAC/CF,QAAAA,UAAU,CAACG,SAAD,CAAV,GAAwB,CAAC,GAAGH,UAAU,CAACG,SAAD,CAAd,EAA2BD,SAA3B,CAAxB;AACH,OAFD,MAEO;AACHF,QAAAA,UAAU,CAACG,SAAD,CAAV,GAAwB,CAAC,GAAGH,UAAU,CAACG,SAAD,CAAV,CAAsBE,MAAtB,CAA6BC,KAAK,IAAIA,KAAK,KAAKJ,SAAhD,CAAJ,CAAxB;AACAH,QAAAA,aAAa,CAACI,SAAD,CAAb,GAA2B,KAA3B;AACH;;AAED,aAAO;AACH1B,QAAAA,UAAU,EAAEsB,aADT;AAEHrB,QAAAA,OAAO,EAAEsB;AAFN,OAAP;AAIH,KAfD;AAgBH;;AAEDO,EAAAA,YAAY,CAACJ,SAAD,EAAY;AACpB,QAAIK,aAAa,GAAG,EAAC,GAAG,KAAKhC,KAAL,CAAWG;AAAf,KAApB;;AAEA,QAAI6B,aAAa,CAACL,SAAD,CAAjB,EAA8B;AAC1BK,MAAAA,aAAa,CAACL,SAAD,CAAb,GAA2B,KAA3B;AACH,KAFD,MAEO;AACHvB,MAAAA,MAAM,CAACC,IAAP,CAAY2B,aAAZ,EAA2BjC,GAA3B,CAA+BkC,CAAC,IAAID,aAAa,CAACC,CAAD,CAAb,GAAmB,KAAvD;AACAD,MAAAA,aAAa,CAACL,SAAD,CAAb,GAA2B,IAA3B;AACH;;AAED,WAAO;AACHxB,MAAAA,UAAU,EAAE6B;AADT,KAAP;AAGH;;AAEDE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,kBAEQ9B,MAAM,CAACC,IAAP,CAAY,KAAKP,iBAAjB,EAAoCC,GAApC,CAAyCsB,aAAD,iBACpC,QAAC,SAAD;AAAW,UAAA,SAAS,EAAC,WAArB;AAAuD,UAAA,QAAQ,EAAE,MAAM,KAAKU,YAAL,CAAkBV,aAAlB,CAAvE;AAAyG,UAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWG,UAAX,CAAsBkB,aAAtB,CAAnH;AAAA,kCACI,QAAC,gBAAD;AACI,YAAA,UAAU,eAAE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,oBADhB;AAEI,6BAAc,iBAFlB;AAGI,YAAA,EAAE,EAAC,gBAHP;AAAA,mCAKI,QAAC,UAAD;AAAY,cAAA,SAAS,EAAC,eAAtB;AAAA,wBAAuCA;AAAvC;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAQI,QAAC,gBAAD;AAAkB,YAAA,SAAS,EAAC,kBAA5B;AAAA,uBACKjB,MAAM,CAACC,IAAP,CAAY,KAAKP,iBAAL,CAAuBuB,aAAvB,CAAZ,EAAmDc,MAAnD,GAA4D,CAA5D,iBACG;AAAA,sCACI,QAAC,QAAD;AAAU,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,OAAO,EAAE;AAAX,iBAAjB;AAAgC,gBAAA,OAAO,EAAE,MAAM,KAAKhB,oBAAL,CAA0BC,aAA1B,CAA/C;AAAyF,gBAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWC,UAAX,CAAsBoB,aAAtB;AAAlG;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEM,CAAC,KAAKrB,KAAL,CAAWC,UAAX,CAAsBoB,aAAtB,CAAD,GAAwC,YAAxC,GAAuD,cAF7D;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFR,eAOI;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,wBAEQjB,MAAM,CAACiC,MAAP,CAAc,KAAKvC,iBAAL,CAAuBuB,aAAvB,CAAd,EAAqDtB,GAArD,CAA0D+B,KAAD,iBACrD;AAAK,gBAAA,SAAS,EAAC,kBAAf;AAAA,2BAEKA,KAFL,oBAEY,QAAC,QAAD;AAAU,kBAAA,QAAQ,EAAE,MAAM;AAAC,yBAAKL,WAAL,CAAiBK,KAAjB,EAAwBT,aAAxB;AAAuC,mBAAlE;AAAoE,kBAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWE,OAAX,CAAmBmB,aAAnB,EAAkCO,QAAlC,CAA2CE,KAA3C;AAA7E;AAAA;AAAA;AAAA;AAAA,wBAFZ;AAAA,iBAAwCT,aAAa,GAAG,GAAhB,GAAsBS,KAA9D;AAAA;AAAA;AAAA;AAAA,sBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA,WAAuCT,aAAvC;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cAFJ,eAmCI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACI;AAAK,UAAA,EAAE,EAAE;AAAT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAyCH;;AA/IqC,C,CAksourcesContent":["import {Component, useEffect, useState} from \"react\";\nimport {Accordion, AccordionDetails, AccordionSummary, Checkbox, Typography} from \"@mui/material\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport './LinkPicker.css'\nimport routes from \"../data/links.json\"\nimport L from \"leaflet\";\n\nexport class LinkPicker extends Component {\n    routeTypesGrouped = {};\n    map = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCheckAll: {\n                \"tram\": false,\n                \"metro\": false,\n                \"bus\": false,\n                \"funicular\": false\n            },\n            isCheck: {\n                \"tram\": [],\n                \"metro\": [],\n                \"bus\": [],\n                \"funicular\": []\n            },\n            isExpanded: {\n                \"tram\": false,\n                \"metro\": false,\n                \"bus\": false,\n                \"funicular\": false\n            }\n        }\n\n        Object.keys(routes).map((t) => (this.routeTypesGrouped)[t] = Object.keys(routes[t]))\n    }\n\n    componentDidMount() {\n        console.log(this.state.isExpanded);\n        this.map = L.map('map', {\n            center: [50.07501157760184, 14.416865286199549],\n            zoom: 13,\n            layers: [\n                L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n                    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n                    maxZoom: 18,\n                    id: 'toner-lite',\n                    tileSize: 512,\n                    zoomOffset: -1\n                }),\n            ],\n            preferCanvas: true\n        })\n    }\n\n    handleSelectAllClick(routeTypeName) {\n        this.setState((state) => {\n            let newIsCheckAll = { ...state.isCheckAll };\n            let newIsCheck = { ...state.isCheck };\n            newIsCheckAll[routeTypeName] = !state.isCheckAll[routeTypeName];\n\n            if (newIsCheckAll[routeTypeName]) {\n                newIsCheck[routeTypeName] = this.routeTypesGrouped[routeTypeName];\n            } else {\n                newIsCheck[routeTypeName] = [];\n            }\n\n            return {\n                isCheckAll: newIsCheckAll,\n                isCheck: newIsCheck\n            };\n        });\n    }\n\n    handleClick(routeName, routeType){\n        this.setState((state) => {\n            let newIsCheck = { ...this.state.isCheck };\n            let newIsCheckAll = { ...this.state.isCheckAll };\n\n            if (!state.isCheck[routeType].includes(routeName)) {\n                newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n            } else {\n                newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n                newIsCheckAll[routeType] = false;\n            }\n\n            return {\n                isCheckAll: newIsCheckAll,\n                isCheck: newIsCheck\n            };\n        });\n    }\n\n    handleExpand(routeType) {\n        let newIsExpanded = {...this.state.isExpanded};\n\n        if (newIsExpanded[routeType]) {\n            newIsExpanded[routeType] = false;\n        } else {\n            Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n            newIsExpanded[routeType] = true;\n        }\n\n        return {\n            isExpanded: newIsExpanded\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"mainDiv\">\n                <h2 className=\"header\">Route picker</h2>\n                <div className=\"divWithAccordions\">\n                    {\n                        Object.keys(this.routeTypesGrouped).map((routeTypeName) => (\n                            <Accordion className=\"accordion\" key={ routeTypeName } onChange={() => this.handleExpand(routeTypeName)} expanded={this.state.isExpanded[routeTypeName]}>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography className=\"accordionName\">{routeTypeName}</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails className=\"accordionDetails\">\n                                    {Object.keys(this.routeTypesGrouped[routeTypeName]).length > 1 &&\n                                        <div>\n                                            <Checkbox style={{ padding: 0}} onClick={() => this.handleSelectAllClick(routeTypeName)} checked={this.state.isCheckAll[routeTypeName]}/>\n                                            { !this.state.isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All' }\n                                        </div>\n                                    }\n                                    <div className=\"rowCheckboxes\">\n                                        {\n                                            Object.values(this.routeTypesGrouped[routeTypeName]).map((route) => (\n                                                <div className=\"columnCheckboxes\" key={ routeTypeName + ' ' + route }>\n                                                    {/*{route} <Checkbox onChange={() => {handleClick(route, routeTypeName); setRoutesGeojson(isCheck)}} checked={isCheck[routeTypeName].includes(route)} />*/}\n                                                    {route} <Checkbox onChange={() => {this.handleClick(route, routeTypeName)}} checked={this.state.isCheck[routeTypeName].includes(route)} />\n                                                </div>\n                                            ))\n                                        }\n                                    </div>\n                                </AccordionDetails>\n                            </Accordion>\n                        ))\n                    }\n                </div>\n                <div className=\"column\">\n                    <div id={\"map\"}></div>\n                </div>\n            </div>\n        )\n    }\n}\n\n// export function LinkPicker() {\n//     // let routeTypesGrouped = {};\n//     // Object.keys(routes).map((t) => routeTypesGrouped[t] = Object.keys(routes[t]));\n//\n//     let routesGeojson = {\n//         \"type\": \"FeatureCollection\",\n//         \"features\": []\n//     };\n//\n//     const [isCheckAll, setIsCheckAll] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     const [isCheck, setIsCheck] = useState({\n//         \"tram\": [],\n//         \"metro\": [],\n//         \"bus\": [],\n//         \"funicular\": []\n//     });\n//\n//     const [isExpanded, setIsExpanded] = useState({\n//         \"tram\": false,\n//         \"metro\": false,\n//         \"bus\": false,\n//         \"funicular\": false\n//     });\n//\n//     useEffect(() => {\n//         let map = L.map('map', {\n//             center: [50.07501157760184, 14.416865286199549],\n//             zoom: 13,\n//             layers: [\n//                 L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/{id}/{z}/{x}/{y}.png', {\n//                     attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n//                     maxZoom: 18,\n//                     id: 'toner-lite',\n//                     tileSize: 512,\n//                     zoomOffset: -1\n//                 }),\n//             ],\n//             preferCanvas: true\n//         });\n//     }, [])\n//\n//     function handleSelectAllClick(routeTypeName) {\n//         let newIsCheckAll = { ...isCheckAll };\n//         newIsCheckAll[routeTypeName] = !newIsCheckAll[routeTypeName];\n//         setIsCheckAll(newIsCheckAll);\n//\n//         let newIsCheck = { ...isCheck };\n//\n//         if (newIsCheckAll[routeTypeName]) {\n//             console.log(routeTypesGrouped[routeTypeName]);\n//             newIsCheck[routeTypeName] = routeTypesGrouped[routeTypeName];\n//         } else {\n//             newIsCheck[routeTypeName] = [];\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleClick(routeName, routeType){\n//         let newIsCheck = { ...isCheck };\n//         if (!isCheck[routeType].includes(routeName)) {\n//             newIsCheck[routeType] = [...newIsCheck[routeType], routeName];\n//         } else {\n//             newIsCheck[routeType] = [...newIsCheck[routeType].filter(route => route !== routeName)];\n//             let newIsCheckAll = { ...isCheckAll };\n//             newIsCheckAll[routeType] = false;\n//             setIsCheckAll(newIsCheckAll);\n//         }\n//         setIsCheck(newIsCheck);\n//     }\n//\n//     function handleExpand(routeType) {\n//         let newIsExpanded = {...isExpanded};\n//         if (newIsExpanded[routeType]) {\n//             newIsExpanded[routeType] = false;\n//         } else {\n//             Object.keys(newIsExpanded).map(k => newIsExpanded[k] = false);\n//             newIsExpanded[routeType] = true;\n//         }\n//         setIsExpanded(newIsExpanded);\n//     }\n//\n//     function setRoutesGeojson(routes) {\n//\n//         // let route = routes[\"metro\"][0];\n//         console.log(routes);\n//     }\n//\n//     return (\n//         <div className=\"mainDiv\">\n//             <h2 className=\"header\">Route picker</h2>\n//             <div className=\"divWithAccordions\">\n//                 {\n//                     Object.keys(routeTypesGrouped).map((routeTypeName) => (\n//                         <Accordion className=\"accordion\" key={ routeTypeName } onChange={() => handleExpand(routeTypeName)} expanded={isExpanded[routeTypeName]}>\n//                             <AccordionSummary\n//                                 expandIcon={<ExpandMoreIcon />}\n//                                 aria-controls=\"panel1a-content\"\n//                                 id=\"panel1a-header\"\n//                             >\n//                                 <Typography className=\"accordionName\">{routeTypeName}</Typography>\n//                             </AccordionSummary>\n//                             <AccordionDetails className=\"accordionDetails\">\n//                                 {Object.keys(routeTypesGrouped[routeTypeName]).length > 1 &&\n//                                     <div>\n//                                         <Checkbox style={{ padding: 0}} onClick={() => handleSelectAllClick(routeTypeName)} checked={isCheckAll[routeTypeName]}/>\n//                                         { !isCheckAll[routeTypeName] ? 'Select All' : 'Unselect All' }\n//                                     </div>\n//                                 }\n//                                 <div className=\"rowCheckboxes\">\n//                                     {\n//                                         Object.values(routeTypesGrouped[routeTypeName]).map((route) => (\n//                                             <div className=\"columnCheckboxes\" key={ routeTypeName + ' ' + route }>\n//                                                 {route} <Checkbox onChange={() => {handleClick(route, routeTypeName); setRoutesGeojson(isCheck)}} checked={isCheck[routeTypeName].includes(route)} />\n//                                             </div>\n//                                         ))\n//                                     }\n//                                 </div>\n//                             </AccordionDetails>\n//                         </Accordion>\n//                     ))\n//                 }\n//             </div>\n//             <div className=\"column\">\n//                 <div id={\"map\"}></div>\n//             </div>\n//         </div>\n//     );\n//\n//\n// }"]},"metadata":{},"sourceType":"module"}